# CertificateServiceImpl
CERTIFICATE_WITH_SUCH_NAME_EXIST_IN_DB_MESSAGE=There is already the certificate with the name '%s' exist in the Database.
TAG_NAME_IS_NOT_VALID_ERROR_MESSAGE=A tag name should contain only latin letters and should be not more than 30 signs long.
TAG_WITH_SUCH_NAME_EXIST_IN_DB_MESSAGE=There is already the tag with the name '%s' exist in the Database.
THE_ID_SHOULD_NOT_BE_LESS_THAN_0=The id should not be less than 1.
THE_CERTIFICATE_ID_SHOULD_NOT_BE_LESS_THAN_0=The certificate id should not be less than 1.
THERE_IS_NO_A_CERTIFICATE_WITH_SUCH_AN_ID_IN_DATABASE=There is no a certificate with id='%s' in the database.
THERE_IS_NO_A_CERTIFICATE_WITH_SUCH_A_NAME_IN_DATABASE=There is no a certificate with the name '%s' in the database.
THERE_IS_NO_A_TAG_WITH_SUCH_AN_ID_IN_THE_SYSTEM=There is no a tag with the id = '%s' in the system.
THE_CERTIFICATE_DOES_NOT_CONTAIN_THE_CERTIFICATE_TAG_WITH_SUCH_AN_ID=The certificate does not contain the certificateTag with the id = '%s'.
THE_CERTIFICATE_ALREADY_CONTAINS_THE_CERTIFICATE_TAG_WITH_SUCH_AN_ID=The certificate already contains the CertificateTag with the id = '%s'.
THERE_ARE_NO_CERTIFICATES_WHICH_CONTAINS_TAG_WITH_NAME=There are no certificates, which contains the tag with the name '%s'.
THERE_ARE_NO_CERTIFICATES_WHICH_NAME_CONTAINS_PATH=There are no certificates, which name contains '%s'.
THERE_ARE_NO_CERTIFICATES_WHICH_DESCRIPTION_CONTAINS_PATH=There are no certificates, which description contains '%s'.
THE_PAGE_NUMBER_SHOULD_BE_MORE_THAN_0 = The value of the 'pageNumber' parameter should not be less than 0.
THE_AMOUNT_ENTITIES_ON_THE_PAGE_SHOULD_BE_MORE_THAN_0 = The value of the 'amountEntitiesOnThePage' parameter should be more than 0.
# TagServiceImpl
THERE_IS_NO_A_CERTIFICATE_TAG_WITH_SUCH_AN_ID_IN_DATABASE=There is no a certificateTag with the id = '%s' in the database.
TAG_WITH_SUCH_ID_IS_ALREADY_EXIST_IN_THE_SYSTEM=The tag with ID '%s' is already exist in the system.
CERTIFICATE_TAG_WITH_SUCH_NAME_EXIST_IN_DB_MESSAGE=There exist already the CertificateTag with the name '%s' in the Database.
THERE_IS_NO_A_CERTIFICATE_TAG_WITH_SUCH_A_NAME_IN_DATABASE=There is no a certificateTag with the name '%s' in the database.
# TagValidatorImpl
THE_NAME_FIELD_SHOULD_NOT_BE_EMPTY=The 'name' field should not be empty.
# CertificateValidatorImpl
THE_DESCRIPTION_FIELD_SHOULD_NOT_BE_EMPTY=The 'description' field should not be empty.
THE_PRICE_FIELD_SHOULD_NOT_BE_EMPTY=The 'price' field should not be empty.
THE_DURATION_FIELD_SHOULD_NOT_BE_EMPTY=The 'duration' field should not be empty.
CERTIFICATE_NAME_SHOULD_CONTAIN_ONLY_LATIN_LETTERS_AND_SHOULD_BE_NOT_MORE_THAN_30_SIGNS_LONG=Certificate name should contain only latin letters and should be not more than 30 signs long.
CERTIFICATE_DESCRIPTION_SHOULD_CONTAIN_ONLY_LATIN_LETTERS_AND_SHOULD_BE_NOT_MORE_THAN_320_SIGNS_LONG=Certificate description should contain only latin letters and should be not more than 320 signs long.
PRICE_CAN_NOT_BE_LESS_THAN_0=Price can not be less than 0.
DURATION_SHOULD_BE_MORE_THAN_0=Duration should be more than 0.
# ExceptionHandler
ERROR_MESSAGE_FOR_OTHER_EXCEPTION=Incorrect data was entered.
# UserValidator
USER_NAME_IS_NOT_VALID_ERROR_MESSAGE=A user nickname should contain only latin letters and should be not more than 30 signs long.
PASSWORD_IS_NOT_VALID_ERROR_MESSAGE=Password should contain only latin letters and signs and should be not more than 64 signs long.
THE_PASSWORD_FIELD_SHOULD_NOT_BE_EMPTY=The 'password' field should not be empty.
THE_NICKNAME_FIELD_SHOULD_NOT_BE_EMPTY=The 'nickname' field should not be empty.
# UserServiceImpl
THERE_IS_NO_A_USER_WITH_SUCH_AN_ID_IN_DATABASE = There is no a user with the id = '%s' in the database.
SUCH_A_USER_IS_ALREADY_EXIST_IN_THE_SYSTEM = The user with the nickname '%s' is already exist in the system.
THERE_IS_NO_AN_ORDER_WITH_SUCH_AN_ID_BY_THE_USER_WITH_ID=There no exist an order with the ID = '%s' by the user with the id = '%s'.
CERTIFICATES_IN_ORDER_SHOULD_BE_NOT_EMPTY=Certificates in the order should not be empty.
# OrderValidatorImpl
ORDER_NAME_SHOULD_CONTAIN_ONLY_LATIN_LETTERS_AND_SHOULD_BE_NOT_MORE_THAN_30_SIGNS_LONG = Order name should contain only latin letters and should be not more than 30 signs long.
USER_DETAILS_IS_NOT_VALID = User details are not valid.
THE_USER_FIELD_SHOULD_NOT_BE_EMPTY = The user field should not be empty.
THE_CERTIFICATES_FIELD_SHOULD_NOT_BE_EMPTY = The 'certificates' field should not be empty.
# OrderServiceImpl
SOME_ID_SHOULD_NOT_BE_LESS_THAN_ONE=%s should not be less than 1.
THERE_IS_NO_A_ORDER_WITH_SUCH_AN_ID_IN_DATABASE=There is no an order with the id = '%s' in the database.
USER_ID_SHOULD_NOT_BE_EMPTY=The user id shoul not be empty.
CERTIFICATE_ID_SHOULD_NOT_BE_EMPTY=The certificate id shoul not be empty.
# Controllers
CREATES_NEW_CERTIFICATE_HATEOAS_LINK_MESSAGE=Creates a new certificate (params: certificate): POST
FETCHES_AND_REMOVES_CERTIFICATE_HATEOAS_LINK_MESSAGE=Fetches and removes certificate from the system (params: certificateId): GET, DELETE
FETCHES_AN_ORDER_HATEOAS_LINK_MESSAGE=Fetches the order from the system (params: orderId): GET
FETCHES_ALL_USERS_HATEOAS_LINK_MESSAGE=Fetches all users: GET
FETCHES_ALL_ORDERS_HATEOAS_LINK_MESSAGE=Fetches all orders: GET
FETCHES_ALL_TAGS_HATEOAS_LINK_MESSAGE=Fetches all tags: GET
FETCHES_ALL_CERTIFICATES_HATEOAS_LINK_MESSAGE=Fetches all certificates: GET
FETCHES_NEXT_PAGE_CERTIFICATES_HATEOAS_LINK_MESSAGE=Fetches NEXT PAGE of certificates: GET
FETCHES_PREVIOUS_PAGE_CERTIFICATES_HATEOAS_LINK_MESSAGE=Fetches PREVIOUS PAGE of certificates: GET
REMOVES_CERTIFICATE_HATEOAS_LINK_MESSAGE=Removes the certificate: DELETE
UPDATES_NEW_CERTIFICATE_HATEOAS_LINK_MESSAGE=Updates the certificate (inputs: certificateId, certificate object): PUT
FETCHES_USER_HATEOAS_LINK_MESSAGE=Fetches this user: GET
CREATES_NEW_USER_HATEOAS_LINK_MESSAGE=Adds new user in the system: POST
USER_ORDERS_CERTIFICATE_HATEOAS_LINK_MESSAGE=User can order a certificate (params: userId/certificateId): POST
ALL_CERTIFICATES_OF_THIS_USER_HATEOAS_LINK_MESSAGE=All certificates this user: GET
COST_AND_TIME_OF_THE_USER_ORDER_HATEOAS_LINK_MESSAGE=Cost and ordered time of the user order (inputs: userId, orderId): GET
FETCHES_THE_USER_HATEOAS_LINK_MESSAGE=Fetches the user from the system (params: certificateId): GET
FETCHES_NEXT_PAGE_USERS_HATEOAS_LINK_MESSAGE=Fetches NEXT PAGE of users: GET
FETCHES_PREVIOUS_PAGE_USERS_HATEOAS_LINK_MESSAGE=Fetches PREVIOUS PAGE of users: GET
FETCHES_ORDER_HATEOAS_LINK_MESSAGE=Fetches this order: GET
FETCHES_TAG_HATEOAS_LINK_MESSAGE=Fetches this tag: GET
CREATES_NEW_TAG_HATEOAS_LINK_MESSAGE=Creates new tag (params: tag): POST
ALL_ORDERS_OF_THIS_USER_HATEOAS_LINK_MESSAGE=All orders this user: (params: userId): GET
CREATES_NEW_ORDER_HATEOAS_LINK_MESSAGE=Adds new order in the system: (params: order): POST
FETCHES_NEXT_PAGE_ORDERS_HATEOAS_LINK_MESSAGE=Fetches NEXT PAGE of orders: GET
FETCHES_PREVIOUS_PAGE_ORDERS_HATEOAS_LINK_MESSAGE=Fetches PREVIOUS PAGE of orders: GET
FETCHES_AND_REMOVES_TAG_HATEOAS_LINK_MESSAGE=Fetches and removes tag from the system (params: tagId): GET, DELETE
UPDATES_TAG_HATEOAS_LINK_MESSAGE=Updates the tag (inputs: tagId, tag object): PUT
FETCHES_NEXT_PAGE_TAG_HATEOAS_LINK_MESSAGE=Fetches NEXT PAGE of tag: GET
FETCHES_PREVIOUS_PAGE_TAG_HATEOAS_LINK_MESSAGE=Fetches PREVIOUS PAGE of tag: GET
FETCHES_MOST_POPULAR_TAG_USER_WITH_HIGHEST_ORDERS_SUM_HATEOAS_LINK_MESSAGE=Fetches the most popular tag of the user with the highest sum of all orders
REMOVES_TAG_HATEOAS_LINK_MESSAGE=Removes a tag: DELETE
USER_NOT_FOUND_WITH_USERNAME = "User Not Found with username: ";
# Authentication controller
SOMETHING_WENT_WRONG = "Something went wrong";
YOU_ARE_LOGGED_OUT_YOUR_TOKEN_IS_NOT_MORE_VALID = "You are logged out. Your token is not more valid";
